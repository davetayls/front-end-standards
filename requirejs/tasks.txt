- refactor considerations:
  - Only execute module functions that have a specific dependency set for them?
    Does this break some pure-web cases now? Probably not?
  - Allow for module reload by tracing dependers. But is module reloading practical?
    Need to have a "destroy" method on a module, to unregister event handlers?
    Or a function callback that can be called for each module unload, and that can
    do custom app unregistering, but should start from leaves and work to the trunk,
    in case the unregister call

- For function(require, exports, module) form, do not pass exports if the function
  does not ask  for it, to allow the function to set the exported value by returning.

- Figure out why priorityOrder test does not work, and if it should be supported.
  Loading a plugin while waiting for a priority load may not be worth supporting,
  it also means it will be slower. A priority module can include plugins but just
  use a plugin to load the priorit module.

- in commonJs.js convert, if take out dependency scanning, things break in the Node adapter.
Need to figure out why. Function.toString() seems to work.

- Allow paths mapping inside modules? for things like jsdom/browser/index.js retrieved via
  require("./jsdom/browser");

- Build: do not require the user to be in the same directory as build file?
- Build: if optimize the build profile file, Closure compiler complains. If put parens
  around the object, then it is OK. Decide if want to go that route or pure JSON route,
  (which still may fail?) or have build profile skip build files?

- Move to using module.basePath instead of require.nameToUrl inside methods? basePath
  would basically call nameToUrl but use no suffix. Hmm, nice thing about nameToUrl is it
  works with any name, not just current module. require.nameToUrl(module.id, ".html")
  but should a module reach outside of its directory?

- DOH updates
  - get latest code
  - fix rendering in IE 9 standards? How to get it to render in IE9 standard mode?

- Allow module names that match Object.prototype method names?
- browser test for loading css?

- Best practices/architecture guide
- Allow r.js to work on Rhino

- consider removing require.isBrowser and require.s.isBrowser, check the tests, and send email to list first.
- include i18n and text plugins in node integration. Make sure text plugin works?
- Look at jquery ui adapter
- jquery as a module

- require.nameToUrl convertDojo.js for dojo.moduleUrl("dojo", "resources/blank.gif")
  would be cool to pass require.nameToUrl("dojo/resources/blank.gif") and have that work. Why is .js assumed?
- Deliver distribution of Dojo based on require
  - manual fix for requireIf in dojo.gfx, like what is done for dojo._base

- Option to remove the script tag after the script loads. Does that help memory? Does it work in all browsers?

- Allow plugins to only implement methods it needs to use, but only if there is minimal/no impact on require.js

- de-dupe plugins in a build, make sure they are only included once? Or does that work already now with
  the latest changes?

- Make sure text plugin works offline.
- Make sure text plugin works in rhino env.
- Get Blackberry simulator. Blackberry greater than 4.6, and particulary with the Blackberry 9500 simulator (with OS v4.7),
install and launch Blackberry MDS service simulator before running simulator to get network.

- trying to find path of the file executed, as given to rhino:
http://groups.google.com/group/jsdoc-2/msg/b1dd2f8991156fa0

- with appName, and no native require, setting path to be outside the baseUrl meant that the require path was really
  relative to the output folder name?

- Use JSDoc to document a full module?

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

- To validate with Caja: http://caja.appspot.com/ and paste the code inside a script tag.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and require.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.
